// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrimeDealsRealestat.Repository.Data;

#nullable disable

namespace Shiping.Repository.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241005125147_payments")]
    partial class payments
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Shiping.Repository.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("Fees")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("SideFees")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4157),
                            Fees = 0f,
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4213),
                            Name = "Cairo",
                            NameAr = "cairo"
                        });
                });

            modelBuilder.Entity("Shiping.Repository.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TotalBalance")
                        .HasColumnType("real");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Shiping.Repository.Models.ClientOrderPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientOrderPayments");
                });

            modelBuilder.Entity("Shiping.Repository.Models.ClientPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientPayment");
                });

            modelBuilder.Entity("Shiping.Repository.Models.CompanyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AboutUs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutUsAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneMumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AboutUs = "About  Ussss",
                            AboutUsAR = "3n 2lsherka",
                            PhoneMumber = "0112012811"
                        });
                });

            modelBuilder.Entity("Shiping.Repository.Models.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("Fees")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("Shiping.Repository.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float?>("DefaultFees")
                        .HasColumnType("real");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FCMToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("EmployeeTypeId");

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4642),
                            EmployeeTypeId = 1,
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4645),
                            Password = "P@ssw0rd",
                            PhoneNumber = "1234567890",
                            UserName = "Admin",
                            title = "MR"
                        });
                });

            modelBuilder.Entity("Shiping.Repository.Models.EmployeePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("permissrionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("permissrionId");

                    b.ToTable("EmployeePermission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4666),
                            EmployeeId = 1,
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4669),
                            permissrionId = 1
                        });
                });

            modelBuilder.Entity("Shiping.Repository.Models.EmployeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAllowDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PermissrionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissrionId");

                    b.ToTable("EmployeeType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4405),
                            IsAllowDelete = false,
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4408),
                            Name = "Admin",
                            NameAr = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4412),
                            IsAllowDelete = false,
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4414),
                            Name = "Driver",
                            NameAr = "سواق"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4417),
                            IsAllowDelete = false,
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4420),
                            Name = "Support",
                            NameAr = "دعم"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4422),
                            IsAllowDelete = false,
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4425),
                            Name = "CallCenter",
                            NameAr = "خدمة عملاء"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4428),
                            IsAllowDelete = false,
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4430),
                            Name = "Accountant",
                            NameAr = "محاسب"
                        });
                });

            modelBuilder.Entity("Shiping.Repository.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("Shiping.Repository.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DisAllowShowInPayment")
                        .HasColumnType("bit");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<float>("DriveryFees")
                        .HasColumnType("real");

                    b.Property<int?>("DriveryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<float?>("MaterialFees")
                        .HasColumnType("real");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("OrderFees")
                        .HasColumnType("real");

                    b.Property<int?>("OrderTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Recipient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DriveryId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("OrderTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Shiping.Repository.Models.OrderHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderId");

                    b.HasIndex("StatusId");

                    b.ToTable("OrderHistories");
                });

            modelBuilder.Entity("Shiping.Repository.Models.OrderMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderMaterial");
                });

            modelBuilder.Entity("Shiping.Repository.Models.OrderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderType");
                });

            modelBuilder.Entity("Shiping.Repository.Models.Permissrion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeTypeId");

                    b.ToTable("Permissrion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4460),
                            EmployeeTypeId = 1,
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4463),
                            Name = "Admin",
                            NameAr = "Admin"
                        });
                });

            modelBuilder.Entity("Shiping.Repository.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4491),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4494),
                            Name = "new",
                            NameAr = "جديد",
                            OrderCount = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4498),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4500),
                            Name = "preparing",
                            NameAr = "قيد التحضير",
                            OrderCount = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4503),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4505),
                            Name = "picked up",
                            NameAr = "تم الاستلام",
                            OrderCount = 0
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4508),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4510),
                            Name = "shipped",
                            NameAr = "تم الشحن",
                            OrderCount = 0
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4513),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4516),
                            Name = "delivered",
                            NameAr = "تم التوصيل",
                            OrderCount = 0
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4518),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4521),
                            Name = "failed",
                            NameAr = "فشل",
                            OrderCount = 0
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4523),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4526),
                            Name = "failed fees collected",
                            NameAr = "فشل - تم جمع الرسوم",
                            OrderCount = 0
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4529),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4531),
                            Name = "could not reach client",
                            NameAr = "تعذر الوصول إلى العميل",
                            OrderCount = 0
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4534),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4536),
                            Name = "client reschedule",
                            NameAr = "العميل أعاد الجدولة",
                            OrderCount = 0
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4539),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4541),
                            Name = "cancelled",
                            NameAr = "ملغى",
                            OrderCount = 0
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4544),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4547),
                            Name = "returned to shipper",
                            NameAr = "تمت إعادة الشحنة إلى المرسل",
                            OrderCount = 0
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4549),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4551),
                            Name = "not received",
                            NameAr = "لم يتم الاستلام",
                            OrderCount = 0
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4554),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4556),
                            Name = "COD received",
                            NameAr = "تم استلام الدفع عند الاستلام",
                            OrderCount = 0
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4559),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4561),
                            Name = "missing info",
                            NameAr = "معلومات مفقودة",
                            OrderCount = 0
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4564),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4566),
                            Name = "on hold",
                            NameAr = "في الانتظار",
                            OrderCount = 0
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4569),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4571),
                            Name = "customer cancelled",
                            NameAr = "ألغى العميل",
                            OrderCount = 0
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4574),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4576),
                            Name = "not ready",
                            NameAr = "غير جاهز",
                            OrderCount = 0
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4579),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4581),
                            Name = "received at warehouse",
                            NameAr = "تم الاستلام في المستودع",
                            OrderCount = 0
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4584),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4586),
                            Name = "resend",
                            NameAr = "إعادة إرسال",
                            OrderCount = 0
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4589),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4591),
                            Name = "ready",
                            NameAr = "جاهز",
                            OrderCount = 0
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4594),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4596),
                            Name = "duplicated",
                            NameAr = "مكرر",
                            OrderCount = 0
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4598),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4600),
                            Name = "missing piece",
                            NameAr = "قطعة مفقودة",
                            OrderCount = 0
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4603),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 10, 5, 15, 51, 45, 157, DateTimeKind.Local).AddTicks(4605),
                            Name = "Paid",
                            NameAr = "تم الدفع",
                            OrderCount = 0
                        });
                });

            modelBuilder.Entity("Shiping.Repository.Models.Client", b =>
                {
                    b.HasOne("Shiping.Repository.Models.City", "City")
                        .WithMany("Clients")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shiping.Repository.Models.District", "District")
                        .WithMany("Clients")
                        .HasForeignKey("DistrictId");

                    b.Navigation("City");

                    b.Navigation("District");
                });

            modelBuilder.Entity("Shiping.Repository.Models.ClientOrderPayment", b =>
                {
                    b.HasOne("Shiping.Repository.Models.Client", "Client")
                        .WithMany("ClientOrderPayments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Shiping.Repository.Models.ClientPayment", b =>
                {
                    b.HasOne("Shiping.Repository.Models.Client", "Client")
                        .WithMany("ClientPayment")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Shiping.Repository.Models.District", b =>
                {
                    b.HasOne("Shiping.Repository.Models.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Shiping.Repository.Models.Employee", b =>
                {
                    b.HasOne("Shiping.Repository.Models.City", "City")
                        .WithMany("Employees")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shiping.Repository.Models.District", "District")
                        .WithMany("Employees")
                        .HasForeignKey("DistrictId");

                    b.HasOne("Shiping.Repository.Models.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("District");

                    b.Navigation("EmployeeType");
                });

            modelBuilder.Entity("Shiping.Repository.Models.EmployeePermission", b =>
                {
                    b.HasOne("Shiping.Repository.Models.Employee", "Employee")
                        .WithMany("EmployeePermissions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shiping.Repository.Models.Permissrion", "permissrion")
                        .WithMany("employeePermissions")
                        .HasForeignKey("permissrionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("permissrion");
                });

            modelBuilder.Entity("Shiping.Repository.Models.EmployeeType", b =>
                {
                    b.HasOne("Shiping.Repository.Models.Permissrion", null)
                        .WithMany("EmployeeTypes")
                        .HasForeignKey("PermissrionId");
                });

            modelBuilder.Entity("Shiping.Repository.Models.Order", b =>
                {
                    b.HasOne("Shiping.Repository.Models.City", "City")
                        .WithMany("Orders")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shiping.Repository.Models.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shiping.Repository.Models.District", "District")
                        .WithMany("Orders")
                        .HasForeignKey("DistrictId");

                    b.HasOne("Shiping.Repository.Models.Employee", "Drivery")
                        .WithMany("Orders")
                        .HasForeignKey("DriveryId");

                    b.HasOne("Shiping.Repository.Models.Material", null)
                        .WithMany("Orders")
                        .HasForeignKey("MaterialId");

                    b.HasOne("Shiping.Repository.Models.OrderType", "OrderType")
                        .WithMany("Orders")
                        .HasForeignKey("OrderTypeId");

                    b.HasOne("Shiping.Repository.Models.Status", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Client");

                    b.Navigation("District");

                    b.Navigation("Drivery");

                    b.Navigation("OrderType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Shiping.Repository.Models.OrderHistory", b =>
                {
                    b.HasOne("Shiping.Repository.Models.Employee", "Employee")
                        .WithMany("OrderHistories")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Shiping.Repository.Models.Order", "Order")
                        .WithMany("OrderHistories")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shiping.Repository.Models.Status", "Status")
                        .WithMany("OrderHistories")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Order");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Shiping.Repository.Models.OrderMaterial", b =>
                {
                    b.HasOne("Shiping.Repository.Models.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shiping.Repository.Models.Order", "Order")
                        .WithMany("OrderMaterials")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Shiping.Repository.Models.Permissrion", b =>
                {
                    b.HasOne("Shiping.Repository.Models.EmployeeType", "EmployeeType")
                        .WithMany()
                        .HasForeignKey("EmployeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeType");
                });

            modelBuilder.Entity("Shiping.Repository.Models.City", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Districts");

                    b.Navigation("Employees");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Shiping.Repository.Models.Client", b =>
                {
                    b.Navigation("ClientOrderPayments");

                    b.Navigation("ClientPayment");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Shiping.Repository.Models.District", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Employees");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Shiping.Repository.Models.Employee", b =>
                {
                    b.Navigation("EmployeePermissions");

                    b.Navigation("OrderHistories");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Shiping.Repository.Models.EmployeeType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Shiping.Repository.Models.Material", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Shiping.Repository.Models.Order", b =>
                {
                    b.Navigation("OrderHistories");

                    b.Navigation("OrderMaterials");
                });

            modelBuilder.Entity("Shiping.Repository.Models.OrderType", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Shiping.Repository.Models.Permissrion", b =>
                {
                    b.Navigation("EmployeeTypes");

                    b.Navigation("employeePermissions");
                });

            modelBuilder.Entity("Shiping.Repository.Models.Status", b =>
                {
                    b.Navigation("OrderHistories");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
