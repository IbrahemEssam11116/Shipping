// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrimeDealsRealestat.Repository.Data;

#nullable disable

namespace Shiping.Repository.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240914124905_data")]
    partial class data
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Shiping.Repository.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("Fees")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("SideFees")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3387),
                            Fees = 0f,
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3446),
                            Name = "Cairo",
                            NameAr = "cairo"
                        });
                });

            modelBuilder.Entity("Shiping.Repository.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TotalBalance")
                        .HasColumnType("real");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Shiping.Repository.Models.ClientOrderPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientOrderPayments");
                });

            modelBuilder.Entity("Shiping.Repository.Models.ClientPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientPayment");
                });

            modelBuilder.Entity("Shiping.Repository.Models.CompanyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AboutUs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneMumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AboutUs = "About  Ussss",
                            PhoneMumber = "0112012811"
                        });
                });

            modelBuilder.Entity("Shiping.Repository.Models.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("Fees")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("Shiping.Repository.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DefaultFees")
                        .HasColumnType("int");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("EmployeeTypeId");

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(4001),
                            EmployeeTypeId = 1,
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(4004),
                            Password = "P@ssw0rd",
                            PhoneNumber = "1234567890",
                            UserName = "Admin",
                            title = "MR"
                        });
                });

            modelBuilder.Entity("Shiping.Repository.Models.EmployeePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("permissrionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("permissrionId");

                    b.ToTable("EmployeePermission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(4033),
                            EmployeeId = 1,
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(4036),
                            permissrionId = 1
                        });
                });

            modelBuilder.Entity("Shiping.Repository.Models.EmployeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAllowDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PermissrionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissrionId");

                    b.ToTable("EmployeeType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3717),
                            IsAllowDelete = false,
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3722),
                            Name = "Admin",
                            NameAr = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3726),
                            IsAllowDelete = false,
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3729),
                            Name = "Driver",
                            NameAr = "سواق"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3733),
                            IsAllowDelete = false,
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3737),
                            Name = "Support",
                            NameAr = "دعم"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3740),
                            IsAllowDelete = false,
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3744),
                            Name = "CallCenter",
                            NameAr = "خدمة عملاء"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3747),
                            IsAllowDelete = false,
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3751),
                            Name = "Accountant",
                            NameAr = "محاسب"
                        });
                });

            modelBuilder.Entity("Shiping.Repository.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("Shiping.Repository.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<float>("DriveryFees")
                        .HasColumnType("real");

                    b.Property<int?>("DriveryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<float?>("MaterialFees")
                        .HasColumnType("real");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("OrderFees")
                        .HasColumnType("real");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DriveryId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("StatusId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Shiping.Repository.Models.OrderHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderId");

                    b.HasIndex("StatusId");

                    b.ToTable("OrderHistories");
                });

            modelBuilder.Entity("Shiping.Repository.Models.Permissrion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeTypeId");

                    b.ToTable("Permissrion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3786),
                            EmployeeTypeId = 1,
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3790),
                            Name = "Admin",
                            NameAr = "Admin"
                        });
                });

            modelBuilder.Entity("Shiping.Repository.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3818),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3822),
                            Name = "new",
                            NameAr = "جديد"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3826),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3829),
                            Name = "preparing",
                            NameAr = "قيد التحضير"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3832),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3835),
                            Name = "picked up",
                            NameAr = "تم الاستلام"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3839),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3842),
                            Name = "shipped",
                            NameAr = "تم الشحن"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3846),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3849),
                            Name = "delivered",
                            NameAr = "تم التوصيل"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3853),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3856),
                            Name = "failed",
                            NameAr = "فشل"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3859),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3862),
                            Name = "failed fees collected",
                            NameAr = "فشل - تم جمع الرسوم"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3866),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3869),
                            Name = "could not reach client",
                            NameAr = "تعذر الوصول إلى العميل"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3873),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3876),
                            Name = "client reschedule",
                            NameAr = "العميل أعاد الجدولة"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3880),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3883),
                            Name = "cancelled",
                            NameAr = "ملغى"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3887),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3890),
                            Name = "returned to shipper",
                            NameAr = "تمت إعادة الشحنة إلى المرسل"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3893),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3897),
                            Name = "not received",
                            NameAr = "لم يتم الاستلام"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3900),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3903),
                            Name = "COD received",
                            NameAr = "تم استلام الدفع عند الاستلام"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3907),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3910),
                            Name = "missing info",
                            NameAr = "معلومات مفقودة"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3914),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3917),
                            Name = "on hold",
                            NameAr = "في الانتظار"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3921),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3924),
                            Name = "customer cancelled",
                            NameAr = "ألغى العميل"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3927),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3930),
                            Name = "not ready",
                            NameAr = "غير جاهز"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3934),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3937),
                            Name = "received at warehouse",
                            NameAr = "تم الاستلام في المستودع"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3941),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3944),
                            Name = "resend",
                            NameAr = "إعادة إرسال"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3947),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3950),
                            Name = "ready",
                            NameAr = "جاهز"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3954),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3957),
                            Name = "duplicated",
                            NameAr = "مكرر"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3961),
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 9, 14, 15, 49, 3, 863, DateTimeKind.Local).AddTicks(3964),
                            Name = "missing piece",
                            NameAr = "قطعة مفقودة"
                        });
                });

            modelBuilder.Entity("Shiping.Repository.Models.Client", b =>
                {
                    b.HasOne("Shiping.Repository.Models.City", "City")
                        .WithMany("Clients")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shiping.Repository.Models.District", "District")
                        .WithMany("Clients")
                        .HasForeignKey("DistrictId");

                    b.Navigation("City");

                    b.Navigation("District");
                });

            modelBuilder.Entity("Shiping.Repository.Models.ClientOrderPayment", b =>
                {
                    b.HasOne("Shiping.Repository.Models.Client", "Client")
                        .WithMany("ClientOrderPayments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Shiping.Repository.Models.ClientPayment", b =>
                {
                    b.HasOne("Shiping.Repository.Models.Client", "Client")
                        .WithMany("ClientPayment")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Shiping.Repository.Models.District", b =>
                {
                    b.HasOne("Shiping.Repository.Models.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Shiping.Repository.Models.Employee", b =>
                {
                    b.HasOne("Shiping.Repository.Models.City", "City")
                        .WithMany("Employees")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shiping.Repository.Models.District", "District")
                        .WithMany("Employees")
                        .HasForeignKey("DistrictId");

                    b.HasOne("Shiping.Repository.Models.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("District");

                    b.Navigation("EmployeeType");
                });

            modelBuilder.Entity("Shiping.Repository.Models.EmployeePermission", b =>
                {
                    b.HasOne("Shiping.Repository.Models.Employee", "Employee")
                        .WithMany("EmployeePermissions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shiping.Repository.Models.Permissrion", "permissrion")
                        .WithMany("employeePermissions")
                        .HasForeignKey("permissrionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("permissrion");
                });

            modelBuilder.Entity("Shiping.Repository.Models.EmployeeType", b =>
                {
                    b.HasOne("Shiping.Repository.Models.Permissrion", null)
                        .WithMany("EmployeeTypes")
                        .HasForeignKey("PermissrionId");
                });

            modelBuilder.Entity("Shiping.Repository.Models.Order", b =>
                {
                    b.HasOne("Shiping.Repository.Models.City", "City")
                        .WithMany("Orders")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shiping.Repository.Models.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shiping.Repository.Models.District", "District")
                        .WithMany("Orders")
                        .HasForeignKey("DistrictId");

                    b.HasOne("Shiping.Repository.Models.Employee", "Drivery")
                        .WithMany("Orders")
                        .HasForeignKey("DriveryId");

                    b.HasOne("Shiping.Repository.Models.Material", "Material")
                        .WithMany("Orders")
                        .HasForeignKey("MaterialId");

                    b.HasOne("Shiping.Repository.Models.Status", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Client");

                    b.Navigation("District");

                    b.Navigation("Drivery");

                    b.Navigation("Material");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Shiping.Repository.Models.OrderHistory", b =>
                {
                    b.HasOne("Shiping.Repository.Models.Employee", "Employee")
                        .WithMany("OrderHistories")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Shiping.Repository.Models.Order", "Order")
                        .WithMany("OrderHistories")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shiping.Repository.Models.Status", "Status")
                        .WithMany("OrderHistories")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Order");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Shiping.Repository.Models.Permissrion", b =>
                {
                    b.HasOne("Shiping.Repository.Models.EmployeeType", "EmployeeType")
                        .WithMany()
                        .HasForeignKey("EmployeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeType");
                });

            modelBuilder.Entity("Shiping.Repository.Models.City", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Districts");

                    b.Navigation("Employees");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Shiping.Repository.Models.Client", b =>
                {
                    b.Navigation("ClientOrderPayments");

                    b.Navigation("ClientPayment");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Shiping.Repository.Models.District", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Employees");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Shiping.Repository.Models.Employee", b =>
                {
                    b.Navigation("EmployeePermissions");

                    b.Navigation("OrderHistories");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Shiping.Repository.Models.EmployeeType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Shiping.Repository.Models.Material", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Shiping.Repository.Models.Order", b =>
                {
                    b.Navigation("OrderHistories");
                });

            modelBuilder.Entity("Shiping.Repository.Models.Permissrion", b =>
                {
                    b.Navigation("EmployeeTypes");

                    b.Navigation("employeePermissions");
                });

            modelBuilder.Entity("Shiping.Repository.Models.Status", b =>
                {
                    b.Navigation("OrderHistories");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
